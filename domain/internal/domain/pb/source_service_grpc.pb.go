// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: domain/v1/source_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SourceService_CreateSource_FullMethodName         = "/domain.v1.SourceService/CreateSource"
	SourceService_GetSource_FullMethodName            = "/domain.v1.SourceService/GetSource"
	SourceService_GetSourceIDs_FullMethodName         = "/domain.v1.SourceService/GetSourceIDs"
	SourceService_UpdateSource_FullMethodName         = "/domain.v1.SourceService/UpdateSource"
	SourceService_DeleteSource_FullMethodName         = "/domain.v1.SourceService/DeleteSource"
	SourceService_ListSources_FullMethodName          = "/domain.v1.SourceService/ListSources"
	SourceService_ListSourcesByDomain_FullMethodName  = "/domain.v1.SourceService/ListSourcesByDomain"
	SourceService_GetPermittedUsers_FullMethodName    = "/domain.v1.SourceService/GetPermittedUsers"
	SourceService_UpdatePermittedUsers_FullMethodName = "/domain.v1.SourceService/UpdatePermittedUsers"
	SourceService_GetPermittedRoles_FullMethodName    = "/domain.v1.SourceService/GetPermittedRoles"
	SourceService_UpdatePermittedRoles_FullMethodName = "/domain.v1.SourceService/UpdatePermittedRoles"
)

// SourceServiceClient is the client API for SourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SourceServiceClient interface {
	CreateSource(ctx context.Context, in *CreateSourceRequest, opts ...grpc.CallOption) (*Source, error)
	GetSource(ctx context.Context, in *GetSourceRequest, opts ...grpc.CallOption) (*Source, error)
	GetSourceIDs(ctx context.Context, in *GetSourceIDsRequest, opts ...grpc.CallOption) (*GetSourceIDsResponse, error)
	UpdateSource(ctx context.Context, in *UpdateSourceRequest, opts ...grpc.CallOption) (*Source, error)
	DeleteSource(ctx context.Context, in *DeleteSourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListSources(ctx context.Context, in *ListSourcesRequest, opts ...grpc.CallOption) (*ListSourcesResponse, error)
	ListSourcesByDomain(ctx context.Context, in *ListSourcesByDomainRequest, opts ...grpc.CallOption) (*ListSourcesResponse, error)
	GetPermittedUsers(ctx context.Context, in *GetResourcePermissionsRequest, opts ...grpc.CallOption) (*PermittedUsers, error)
	UpdatePermittedUsers(ctx context.Context, in *PermittedUsers, opts ...grpc.CallOption) (*PermittedUsers, error)
	GetPermittedRoles(ctx context.Context, in *GetResourcePermissionsRequest, opts ...grpc.CallOption) (*PermittedRoles, error)
	UpdatePermittedRoles(ctx context.Context, in *PermittedRoles, opts ...grpc.CallOption) (*PermittedRoles, error)
}

type sourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSourceServiceClient(cc grpc.ClientConnInterface) SourceServiceClient {
	return &sourceServiceClient{cc}
}

func (c *sourceServiceClient) CreateSource(ctx context.Context, in *CreateSourceRequest, opts ...grpc.CallOption) (*Source, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Source)
	err := c.cc.Invoke(ctx, SourceService_CreateSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) GetSource(ctx context.Context, in *GetSourceRequest, opts ...grpc.CallOption) (*Source, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Source)
	err := c.cc.Invoke(ctx, SourceService_GetSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) GetSourceIDs(ctx context.Context, in *GetSourceIDsRequest, opts ...grpc.CallOption) (*GetSourceIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSourceIDsResponse)
	err := c.cc.Invoke(ctx, SourceService_GetSourceIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) UpdateSource(ctx context.Context, in *UpdateSourceRequest, opts ...grpc.CallOption) (*Source, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Source)
	err := c.cc.Invoke(ctx, SourceService_UpdateSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) DeleteSource(ctx context.Context, in *DeleteSourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SourceService_DeleteSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) ListSources(ctx context.Context, in *ListSourcesRequest, opts ...grpc.CallOption) (*ListSourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSourcesResponse)
	err := c.cc.Invoke(ctx, SourceService_ListSources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) ListSourcesByDomain(ctx context.Context, in *ListSourcesByDomainRequest, opts ...grpc.CallOption) (*ListSourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSourcesResponse)
	err := c.cc.Invoke(ctx, SourceService_ListSourcesByDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) GetPermittedUsers(ctx context.Context, in *GetResourcePermissionsRequest, opts ...grpc.CallOption) (*PermittedUsers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PermittedUsers)
	err := c.cc.Invoke(ctx, SourceService_GetPermittedUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) UpdatePermittedUsers(ctx context.Context, in *PermittedUsers, opts ...grpc.CallOption) (*PermittedUsers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PermittedUsers)
	err := c.cc.Invoke(ctx, SourceService_UpdatePermittedUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) GetPermittedRoles(ctx context.Context, in *GetResourcePermissionsRequest, opts ...grpc.CallOption) (*PermittedRoles, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PermittedRoles)
	err := c.cc.Invoke(ctx, SourceService_GetPermittedRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) UpdatePermittedRoles(ctx context.Context, in *PermittedRoles, opts ...grpc.CallOption) (*PermittedRoles, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PermittedRoles)
	err := c.cc.Invoke(ctx, SourceService_UpdatePermittedRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SourceServiceServer is the server API for SourceService service.
// All implementations must embed UnimplementedSourceServiceServer
// for forward compatibility.
type SourceServiceServer interface {
	CreateSource(context.Context, *CreateSourceRequest) (*Source, error)
	GetSource(context.Context, *GetSourceRequest) (*Source, error)
	GetSourceIDs(context.Context, *GetSourceIDsRequest) (*GetSourceIDsResponse, error)
	UpdateSource(context.Context, *UpdateSourceRequest) (*Source, error)
	DeleteSource(context.Context, *DeleteSourceRequest) (*emptypb.Empty, error)
	ListSources(context.Context, *ListSourcesRequest) (*ListSourcesResponse, error)
	ListSourcesByDomain(context.Context, *ListSourcesByDomainRequest) (*ListSourcesResponse, error)
	GetPermittedUsers(context.Context, *GetResourcePermissionsRequest) (*PermittedUsers, error)
	UpdatePermittedUsers(context.Context, *PermittedUsers) (*PermittedUsers, error)
	GetPermittedRoles(context.Context, *GetResourcePermissionsRequest) (*PermittedRoles, error)
	UpdatePermittedRoles(context.Context, *PermittedRoles) (*PermittedRoles, error)
	mustEmbedUnimplementedSourceServiceServer()
}

// UnimplementedSourceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSourceServiceServer struct{}

func (UnimplementedSourceServiceServer) CreateSource(context.Context, *CreateSourceRequest) (*Source, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSource not implemented")
}
func (UnimplementedSourceServiceServer) GetSource(context.Context, *GetSourceRequest) (*Source, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSource not implemented")
}
func (UnimplementedSourceServiceServer) GetSourceIDs(context.Context, *GetSourceIDsRequest) (*GetSourceIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSourceIDs not implemented")
}
func (UnimplementedSourceServiceServer) UpdateSource(context.Context, *UpdateSourceRequest) (*Source, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSource not implemented")
}
func (UnimplementedSourceServiceServer) DeleteSource(context.Context, *DeleteSourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSource not implemented")
}
func (UnimplementedSourceServiceServer) ListSources(context.Context, *ListSourcesRequest) (*ListSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSources not implemented")
}
func (UnimplementedSourceServiceServer) ListSourcesByDomain(context.Context, *ListSourcesByDomainRequest) (*ListSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSourcesByDomain not implemented")
}
func (UnimplementedSourceServiceServer) GetPermittedUsers(context.Context, *GetResourcePermissionsRequest) (*PermittedUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermittedUsers not implemented")
}
func (UnimplementedSourceServiceServer) UpdatePermittedUsers(context.Context, *PermittedUsers) (*PermittedUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermittedUsers not implemented")
}
func (UnimplementedSourceServiceServer) GetPermittedRoles(context.Context, *GetResourcePermissionsRequest) (*PermittedRoles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermittedRoles not implemented")
}
func (UnimplementedSourceServiceServer) UpdatePermittedRoles(context.Context, *PermittedRoles) (*PermittedRoles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermittedRoles not implemented")
}
func (UnimplementedSourceServiceServer) mustEmbedUnimplementedSourceServiceServer() {}
func (UnimplementedSourceServiceServer) testEmbeddedByValue()                       {}

// UnsafeSourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SourceServiceServer will
// result in compilation errors.
type UnsafeSourceServiceServer interface {
	mustEmbedUnimplementedSourceServiceServer()
}

func RegisterSourceServiceServer(s grpc.ServiceRegistrar, srv SourceServiceServer) {
	// If the following call pancis, it indicates UnimplementedSourceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SourceService_ServiceDesc, srv)
}

func _SourceService_CreateSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).CreateSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourceService_CreateSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).CreateSource(ctx, req.(*CreateSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_GetSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).GetSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourceService_GetSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).GetSource(ctx, req.(*GetSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_GetSourceIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSourceIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).GetSourceIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourceService_GetSourceIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).GetSourceIDs(ctx, req.(*GetSourceIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_UpdateSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).UpdateSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourceService_UpdateSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).UpdateSource(ctx, req.(*UpdateSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_DeleteSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).DeleteSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourceService_DeleteSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).DeleteSource(ctx, req.(*DeleteSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_ListSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).ListSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourceService_ListSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).ListSources(ctx, req.(*ListSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_ListSourcesByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSourcesByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).ListSourcesByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourceService_ListSourcesByDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).ListSourcesByDomain(ctx, req.(*ListSourcesByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_GetPermittedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourcePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).GetPermittedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourceService_GetPermittedUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).GetPermittedUsers(ctx, req.(*GetResourcePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_UpdatePermittedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermittedUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).UpdatePermittedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourceService_UpdatePermittedUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).UpdatePermittedUsers(ctx, req.(*PermittedUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_GetPermittedRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourcePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).GetPermittedRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourceService_GetPermittedRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).GetPermittedRoles(ctx, req.(*GetResourcePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_UpdatePermittedRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermittedRoles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).UpdatePermittedRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SourceService_UpdatePermittedRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).UpdatePermittedRoles(ctx, req.(*PermittedRoles))
	}
	return interceptor(ctx, in, info, handler)
}

// SourceService_ServiceDesc is the grpc.ServiceDesc for SourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "domain.v1.SourceService",
	HandlerType: (*SourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSource",
			Handler:    _SourceService_CreateSource_Handler,
		},
		{
			MethodName: "GetSource",
			Handler:    _SourceService_GetSource_Handler,
		},
		{
			MethodName: "GetSourceIDs",
			Handler:    _SourceService_GetSourceIDs_Handler,
		},
		{
			MethodName: "UpdateSource",
			Handler:    _SourceService_UpdateSource_Handler,
		},
		{
			MethodName: "DeleteSource",
			Handler:    _SourceService_DeleteSource_Handler,
		},
		{
			MethodName: "ListSources",
			Handler:    _SourceService_ListSources_Handler,
		},
		{
			MethodName: "ListSourcesByDomain",
			Handler:    _SourceService_ListSourcesByDomain_Handler,
		},
		{
			MethodName: "GetPermittedUsers",
			Handler:    _SourceService_GetPermittedUsers_Handler,
		},
		{
			MethodName: "UpdatePermittedUsers",
			Handler:    _SourceService_UpdatePermittedUsers_Handler,
		},
		{
			MethodName: "GetPermittedRoles",
			Handler:    _SourceService_GetPermittedRoles_Handler,
		},
		{
			MethodName: "UpdatePermittedRoles",
			Handler:    _SourceService_UpdatePermittedRoles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "domain/v1/source_service.proto",
}
