// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: domain/v1/scenario_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScenarioService_CreateScenario_FullMethodName        = "/domain.v1.ScenarioService/CreateScenario"
	ScenarioService_GetScenario_FullMethodName           = "/domain.v1.ScenarioService/GetScenario"
	ScenarioService_GetDefaultScenario_FullMethodName    = "/domain.v1.ScenarioService/GetDefaultScenario"
	ScenarioService_UpdateScenario_FullMethodName        = "/domain.v1.ScenarioService/UpdateScenario"
	ScenarioService_DeleteScenario_FullMethodName        = "/domain.v1.ScenarioService/DeleteScenario"
	ScenarioService_ListScenarios_FullMethodName         = "/domain.v1.ScenarioService/ListScenarios"
	ScenarioService_ListScenariosByDomain_FullMethodName = "/domain.v1.ScenarioService/ListScenariosByDomain"
)

// ScenarioServiceClient is the client API for ScenarioService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScenarioServiceClient interface {
	CreateScenario(ctx context.Context, in *CreateScenarioRequest, opts ...grpc.CallOption) (*Scenario, error)
	GetScenario(ctx context.Context, in *GetScenarioRequest, opts ...grpc.CallOption) (*Scenario, error)
	GetDefaultScenario(ctx context.Context, in *GetDefaultScenarioRequest, opts ...grpc.CallOption) (*Scenario, error)
	UpdateScenario(ctx context.Context, in *UpdateScenarioRequest, opts ...grpc.CallOption) (*Scenario, error)
	DeleteScenario(ctx context.Context, in *DeleteScenarioRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListScenarios(ctx context.Context, in *ListScenariosRequest, opts ...grpc.CallOption) (*ListScenariosResponse, error)
	ListScenariosByDomain(ctx context.Context, in *ListScenariosByDomainRequest, opts ...grpc.CallOption) (*ListScenariosResponse, error)
}

type scenarioServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScenarioServiceClient(cc grpc.ClientConnInterface) ScenarioServiceClient {
	return &scenarioServiceClient{cc}
}

func (c *scenarioServiceClient) CreateScenario(ctx context.Context, in *CreateScenarioRequest, opts ...grpc.CallOption) (*Scenario, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Scenario)
	err := c.cc.Invoke(ctx, ScenarioService_CreateScenario_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scenarioServiceClient) GetScenario(ctx context.Context, in *GetScenarioRequest, opts ...grpc.CallOption) (*Scenario, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Scenario)
	err := c.cc.Invoke(ctx, ScenarioService_GetScenario_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scenarioServiceClient) GetDefaultScenario(ctx context.Context, in *GetDefaultScenarioRequest, opts ...grpc.CallOption) (*Scenario, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Scenario)
	err := c.cc.Invoke(ctx, ScenarioService_GetDefaultScenario_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scenarioServiceClient) UpdateScenario(ctx context.Context, in *UpdateScenarioRequest, opts ...grpc.CallOption) (*Scenario, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Scenario)
	err := c.cc.Invoke(ctx, ScenarioService_UpdateScenario_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scenarioServiceClient) DeleteScenario(ctx context.Context, in *DeleteScenarioRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ScenarioService_DeleteScenario_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scenarioServiceClient) ListScenarios(ctx context.Context, in *ListScenariosRequest, opts ...grpc.CallOption) (*ListScenariosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListScenariosResponse)
	err := c.cc.Invoke(ctx, ScenarioService_ListScenarios_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scenarioServiceClient) ListScenariosByDomain(ctx context.Context, in *ListScenariosByDomainRequest, opts ...grpc.CallOption) (*ListScenariosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListScenariosResponse)
	err := c.cc.Invoke(ctx, ScenarioService_ListScenariosByDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScenarioServiceServer is the server API for ScenarioService service.
// All implementations must embed UnimplementedScenarioServiceServer
// for forward compatibility.
type ScenarioServiceServer interface {
	CreateScenario(context.Context, *CreateScenarioRequest) (*Scenario, error)
	GetScenario(context.Context, *GetScenarioRequest) (*Scenario, error)
	GetDefaultScenario(context.Context, *GetDefaultScenarioRequest) (*Scenario, error)
	UpdateScenario(context.Context, *UpdateScenarioRequest) (*Scenario, error)
	DeleteScenario(context.Context, *DeleteScenarioRequest) (*emptypb.Empty, error)
	ListScenarios(context.Context, *ListScenariosRequest) (*ListScenariosResponse, error)
	ListScenariosByDomain(context.Context, *ListScenariosByDomainRequest) (*ListScenariosResponse, error)
	mustEmbedUnimplementedScenarioServiceServer()
}

// UnimplementedScenarioServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScenarioServiceServer struct{}

func (UnimplementedScenarioServiceServer) CreateScenario(context.Context, *CreateScenarioRequest) (*Scenario, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScenario not implemented")
}
func (UnimplementedScenarioServiceServer) GetScenario(context.Context, *GetScenarioRequest) (*Scenario, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScenario not implemented")
}
func (UnimplementedScenarioServiceServer) GetDefaultScenario(context.Context, *GetDefaultScenarioRequest) (*Scenario, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultScenario not implemented")
}
func (UnimplementedScenarioServiceServer) UpdateScenario(context.Context, *UpdateScenarioRequest) (*Scenario, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScenario not implemented")
}
func (UnimplementedScenarioServiceServer) DeleteScenario(context.Context, *DeleteScenarioRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScenario not implemented")
}
func (UnimplementedScenarioServiceServer) ListScenarios(context.Context, *ListScenariosRequest) (*ListScenariosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScenarios not implemented")
}
func (UnimplementedScenarioServiceServer) ListScenariosByDomain(context.Context, *ListScenariosByDomainRequest) (*ListScenariosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScenariosByDomain not implemented")
}
func (UnimplementedScenarioServiceServer) mustEmbedUnimplementedScenarioServiceServer() {}
func (UnimplementedScenarioServiceServer) testEmbeddedByValue()                         {}

// UnsafeScenarioServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScenarioServiceServer will
// result in compilation errors.
type UnsafeScenarioServiceServer interface {
	mustEmbedUnimplementedScenarioServiceServer()
}

func RegisterScenarioServiceServer(s grpc.ServiceRegistrar, srv ScenarioServiceServer) {
	// If the following call pancis, it indicates UnimplementedScenarioServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScenarioService_ServiceDesc, srv)
}

func _ScenarioService_CreateScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenarioServiceServer).CreateScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScenarioService_CreateScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenarioServiceServer).CreateScenario(ctx, req.(*CreateScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScenarioService_GetScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenarioServiceServer).GetScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScenarioService_GetScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenarioServiceServer).GetScenario(ctx, req.(*GetScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScenarioService_GetDefaultScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenarioServiceServer).GetDefaultScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScenarioService_GetDefaultScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenarioServiceServer).GetDefaultScenario(ctx, req.(*GetDefaultScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScenarioService_UpdateScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenarioServiceServer).UpdateScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScenarioService_UpdateScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenarioServiceServer).UpdateScenario(ctx, req.(*UpdateScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScenarioService_DeleteScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenarioServiceServer).DeleteScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScenarioService_DeleteScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenarioServiceServer).DeleteScenario(ctx, req.(*DeleteScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScenarioService_ListScenarios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScenariosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenarioServiceServer).ListScenarios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScenarioService_ListScenarios_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenarioServiceServer).ListScenarios(ctx, req.(*ListScenariosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScenarioService_ListScenariosByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScenariosByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenarioServiceServer).ListScenariosByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScenarioService_ListScenariosByDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenarioServiceServer).ListScenariosByDomain(ctx, req.(*ListScenariosByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScenarioService_ServiceDesc is the grpc.ServiceDesc for ScenarioService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScenarioService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "domain.v1.ScenarioService",
	HandlerType: (*ScenarioServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateScenario",
			Handler:    _ScenarioService_CreateScenario_Handler,
		},
		{
			MethodName: "GetScenario",
			Handler:    _ScenarioService_GetScenario_Handler,
		},
		{
			MethodName: "GetDefaultScenario",
			Handler:    _ScenarioService_GetDefaultScenario_Handler,
		},
		{
			MethodName: "UpdateScenario",
			Handler:    _ScenarioService_UpdateScenario_Handler,
		},
		{
			MethodName: "DeleteScenario",
			Handler:    _ScenarioService_DeleteScenario_Handler,
		},
		{
			MethodName: "ListScenarios",
			Handler:    _ScenarioService_ListScenarios_Handler,
		},
		{
			MethodName: "ListScenariosByDomain",
			Handler:    _ScenarioService_ListScenariosByDomain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "domain/v1/scenario_service.proto",
}
