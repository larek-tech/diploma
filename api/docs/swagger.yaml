basePath: /
definitions:
  internal_chat_pb.Query:
    properties:
      chatId:
        type: string
      content:
        type: string
      createdAt:
        $ref: '#/definitions/timestamppb.Timestamp'
      domainId:
        type: integer
      id:
        type: integer
      metadata:
        items:
          type: integer
        type: array
      scenarioId:
        type: integer
      sourceIds:
        items:
          type: string
        type: array
      userId:
        type: integer
    type: object
  pb.Chat:
    properties:
      content:
        items:
          $ref: '#/definitions/pb.Content'
        type: array
      createdAt:
        $ref: '#/definitions/timestamppb.Timestamp'
      id:
        type: string
      title:
        type: string
      updatedAt:
        $ref: '#/definitions/timestamppb.Timestamp'
      userId:
        type: integer
    type: object
  pb.Content:
    properties:
      query:
        $ref: '#/definitions/internal_chat_pb.Query'
      response:
        $ref: '#/definitions/pb.Response'
    type: object
  pb.CreateDomainRequest:
    properties:
      sourceIds:
        items:
          type: integer
        type: array
      title:
        type: string
    type: object
  pb.CreateScenarioRequest:
    properties:
      model:
        $ref: '#/definitions/pb.LlmModel'
      multiQuery:
        $ref: '#/definitions/pb.MultiQuery'
      reranker:
        $ref: '#/definitions/pb.Reranker'
      vectorSearch:
        $ref: '#/definitions/pb.VectorSearch'
    type: object
  pb.CreateSourceRequest:
    properties:
      content:
        items:
          type: integer
        type: array
      credentials:
        items:
          type: integer
        type: array
      title:
        type: string
      typ:
        $ref: '#/definitions/pb.SourceType'
      updateParams:
        $ref: '#/definitions/pb.UpdateParams'
    type: object
  pb.CronFormat:
    properties:
      dayOfMonth:
        type: integer
      dayOfWeek:
        type: integer
      hour:
        type: integer
      minute:
        type: integer
      month:
        type: integer
    type: object
  pb.Domain:
    properties:
      createdAt:
        $ref: '#/definitions/timestamppb.Timestamp'
      id:
        type: integer
      sourceIds:
        items:
          type: integer
        type: array
      title:
        type: string
      updatedAt:
        $ref: '#/definitions/timestamppb.Timestamp'
    type: object
  pb.GetDomainResponse:
    properties:
      domain:
        $ref: '#/definitions/pb.Domain'
    type: object
  pb.GetScenarioResponse:
    properties:
      scenario:
        $ref: '#/definitions/pb.Scenario'
    type: object
  pb.GetSourceResponse:
    properties:
      source:
        $ref: '#/definitions/pb.Source'
    type: object
  pb.ListChatsResponse:
    properties:
      chats:
        items:
          $ref: '#/definitions/pb.Chat'
        type: array
    type: object
  pb.ListDomainsResponse:
    properties:
      domains:
        items:
          $ref: '#/definitions/pb.Domain'
        type: array
    type: object
  pb.ListScenariosResponse:
    properties:
      scenarios:
        items:
          $ref: '#/definitions/pb.Scenario'
        type: array
    type: object
  pb.ListSourcesResponse:
    properties:
      sources:
        items:
          $ref: '#/definitions/pb.Source'
        type: array
    type: object
  pb.LlmModel:
    properties:
      modelName:
        type: string
      systemPrompt:
        type: string
      temperature:
        type: number
      topK:
        type: integer
      topP:
        type: number
    type: object
  pb.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  pb.LoginResponse:
    properties:
      meta:
        $ref: '#/definitions/pb.UserAuthMetadata'
      token:
        type: string
      type:
        type: string
    type: object
  pb.MultiQuery:
    properties:
      nQueries:
        description: Количество перефразированных вопросов
        type: integer
      queryModelName:
        type: string
      useMultiquery:
        type: boolean
    type: object
  pb.PermittedRoles:
    properties:
      resourceId:
        type: integer
      roleIds:
        items:
          type: integer
        type: array
    type: object
  pb.PermittedUsers:
    properties:
      resourceId:
        type: integer
      userIds:
        items:
          type: integer
        type: array
    type: object
  pb.RenameChatRequest:
    properties:
      chatId:
        type: string
      title:
        type: string
    type: object
  pb.Reranker:
    properties:
      rerankerMaxLength:
        type: integer
      rerankerModel:
        type: string
      topK:
        description: Количество чанков после реранкинга
        type: integer
      useRerank:
        type: boolean
    type: object
  pb.Response:
    properties:
      chatId:
        type: string
      content:
        type: string
      createdAt:
        $ref: '#/definitions/timestamppb.Timestamp'
      id:
        type: integer
      metadata:
        items:
          type: integer
        type: array
      queryId:
        type: integer
      status:
        $ref: '#/definitions/pb.ResponseStatus'
      updatedAt:
        $ref: '#/definitions/timestamppb.Timestamp'
    type: object
  pb.ResponseStatus:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    type: integer
    x-enum-varnames:
    - ResponseStatus_RESPONSE_UNDEFINED
    - ResponseStatus_RESPONSE_CREATED
    - ResponseStatus_RESPONSE_PROCESSING
    - ResponseStatus_RESPONSE_SUCCESS
    - ResponseStatus_RESPONSE_ERROR
    - ResponseStatus_RESPONSE_CANCELED
  pb.Scenario:
    properties:
      createdAt:
        $ref: '#/definitions/timestamppb.Timestamp'
      id:
        type: integer
      model:
        $ref: '#/definitions/pb.LlmModel'
      multiQuery:
        $ref: '#/definitions/pb.MultiQuery'
      reranker:
        $ref: '#/definitions/pb.Reranker'
      updatedAt:
        $ref: '#/definitions/timestamppb.Timestamp'
      vectorSearch:
        $ref: '#/definitions/pb.VectorSearch'
    type: object
  pb.Source:
    properties:
      content:
        items:
          type: integer
        type: array
      createdAt:
        $ref: '#/definitions/timestamppb.Timestamp'
      credentials:
        items:
          type: integer
        type: array
      id:
        type: integer
      status:
        $ref: '#/definitions/pb.SourceStatus'
      title:
        type: string
      typ:
        $ref: '#/definitions/pb.SourceType'
      updateParams:
        $ref: '#/definitions/pb.UpdateParams'
      updatedAt:
        $ref: '#/definitions/timestamppb.Timestamp'
      userId:
        type: integer
    type: object
  pb.SourceStatus:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - SourceStatus_STATUS_UNDEFINED
    - SourceStatus_STATUS_READY
    - SourceStatus_STATUS_PARSING
    - SourceStatus_STATUS_FAILED
  pb.SourceType:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-varnames:
    - SourceType_TYPE_UNDEFINED
    - SourceType_TYPE_WEB
    - SourceType_TYPE_SINGLE_FILE
    - SourceType_TYPE_ARCHIVED_FILES
    - SourceType_TYPE_WITH_CREDENTIALS
  pb.UpdateDomainRequest:
    properties:
      domainId:
        type: integer
      sourceIds:
        items:
          type: integer
        type: array
      title:
        type: string
    type: object
  pb.UpdateParams:
    properties:
      cron:
        $ref: '#/definitions/pb.CronFormat'
      everyPeriod:
        type: integer
    type: object
  pb.UpdateScenarioRequest:
    properties:
      modelName:
        type: string
      modelTopK:
        type: integer
      nQueries:
        description: Количество перефразированных вопросов
        type: integer
      queryModelName:
        description: Пока не знаю нучно ли будет
        type: string
      rerankerMaxLength:
        type: integer
      rerankerModel:
        type: string
      rerankerTopK:
        description: Количество чанков после реранкинга
        type: integer
      scenarioId:
        type: integer
      searchByQuery:
        type: boolean
      systemPrompt:
        type: string
      temperature:
        type: number
      threshold:
        type: number
      topN:
        description: Сколько чанков забирать при векторном поиске.
        type: integer
      topP:
        type: number
      useMultiquery:
        type: boolean
      useRerank:
        type: boolean
    type: object
  pb.UpdateSourceRequest:
    properties:
      content:
        items:
          type: integer
        type: array
      credentials:
        items:
          type: integer
        type: array
      sourceId:
        type: integer
      title:
        type: string
      updateParams:
        $ref: '#/definitions/pb.UpdateParams'
    type: object
  pb.UserAuthMetadata:
    properties:
      roles:
        items:
          type: integer
        type: array
      userId:
        type: integer
    type: object
  pb.VectorSearch:
    properties:
      searchByQuery:
        type: boolean
      threshold:
        type: number
      topN:
        description: Сколько чанков забирать при векторном поиске.
        type: integer
    type: object
  timestamppb.Timestamp:
    properties:
      nanos:
        description: |-
          Non-negative fractions of a second at nanosecond resolution. Negative
          second values with fractions must still have non-negative nanos values
          that count forward in time. Must be from 0 to 999,999,999
          inclusive.
        type: integer
      seconds:
        description: |-
          Represents seconds of UTC time since Unix epoch
          1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
          9999-12-31T23:59:59Z inclusive.
        type: integer
    type: object
host: localhost:9000
info:
  contact: {}
  description: Diploma RAG API service documentation.
  license:
    name: MIT
    url: https://github.com/larek-tech/diploma/blob/api/LICENSE
  title: Diploma API
  version: "1.0"
paths:
  /api/v1/chat/:
    post:
      consumes:
      - application/json
      description: Creates new chat for RAG system.
      produces:
      - application/json
      responses:
        "201":
          description: Chat successfully created
          schema:
            $ref: '#/definitions/pb.Chat'
        "400":
          description: Failed to create chat
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create new chat.
      tags:
      - chat
  /api/v1/chat/{id}:
    delete:
      consumes:
      - application/json
      description: Soft delete chat by ID.
      parameters:
      - description: Chat ID
        in: path
        name: chatID
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Chat successfully deleted
          schema:
            $ref: '#/definitions/pb.Chat'
        "400":
          description: Failed to delete chat
          schema:
            type: string
        "404":
          description: Chat not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete chat.
      tags:
      - chat
    put:
      consumes:
      - application/json
      description: Update chat information.
      parameters:
      - description: Chat ID
        in: path
        name: chatID
        required: true
        type: integer
      - description: Update params
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/pb.RenameChatRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Chat updated
          schema:
            $ref: '#/definitions/pb.Chat'
        "400":
          description: Failed to update chat
          schema:
            type: string
        "404":
          description: Chat not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update chat.
      tags:
      - chat
  /api/v1/chat/cancel/{id}:
    post:
      consumes:
      - application/json
      description: Cancel processing of query (all dependant jobs) by id.
      parameters:
      - description: Query ID
        in: path
        name: queryID
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Processing query successfully canceled
          schema:
            $ref: '#/definitions/pb.Chat'
        "400":
          description: Failed to cancel query
          schema:
            type: string
        "403":
          description: No access to cancel query
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Cancel query.
      tags:
      - chat
  /api/v1/chat/history/{id}:
    get:
      consumes:
      - application/json
      description: Returns chat with messages within it.
      parameters:
      - description: Chat ID
        in: path
        name: chatID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Returned chat
          schema:
            $ref: '#/definitions/pb.Chat'
        "400":
          description: Failed to get chat
          schema:
            type: string
        "404":
          description: Chat not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get chat.
      tags:
      - chat
  /api/v1/chat/list:
    get:
      consumes:
      - application/json
      description: List chats created by user.
      parameters:
      - description: Pagination offset
        in: query
        name: offset
        required: true
        type: integer
      - description: Pagination limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of chats
          schema:
            $ref: '#/definitions/pb.ListChatsResponse'
        "400":
          description: Failed to list chats
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: List chats.
      tags:
      - chat
  /api/v1/domain/:
    post:
      consumes:
      - application/json
      description: Creates new domain (group of sources used for RAG vector search).
      parameters:
      - description: Input data for creating domain
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/pb.CreateDomainRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Domain successfully created
          schema:
            $ref: '#/definitions/pb.Domain'
        "400":
          description: Failed to create domain
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create new domain.
      tags:
      - domain
  /api/v1/domain/{id}:
    delete:
      consumes:
      - application/json
      description: Delete domain by ID.
      parameters:
      - description: Domain ID
        in: path
        name: domainID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Domain deleted
          schema:
            type: string
        "400":
          description: Failed to delete domain
          schema:
            type: string
        "404":
          description: Domain not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete domain.
      tags:
      - domain
    get:
      consumes:
      - application/json
      description: Returns information about domain.
      parameters:
      - description: Requested domain ID
        in: path
        name: domainID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Domain
          schema:
            $ref: '#/definitions/pb.GetDomainResponse'
        "400":
          description: Failed to get domain
          schema:
            type: string
        "404":
          description: Domain not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get domain.
      tags:
      - domain
    put:
      consumes:
      - application/json
      description: Update domain information.
      parameters:
      - description: Domain ID
        in: path
        name: domainID
        required: true
        type: integer
      - description: Update params
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/pb.UpdateDomainRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Domain updated
          schema:
            $ref: '#/definitions/pb.Domain'
        "400":
          description: Failed to update domain
          schema:
            type: string
        "404":
          description: Domain not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update domain.
      tags:
      - domain
  /api/v1/domain/list:
    get:
      consumes:
      - application/json
      description: List domains to which user has access.
      parameters:
      - description: Pagination offset
        in: query
        name: offset
        required: true
        type: integer
      - description: Pagination limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of domains
          schema:
            $ref: '#/definitions/pb.ListDomainsResponse'
        "400":
          description: Failed to list domains
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: List domains.
      tags:
      - domain
  /api/v1/domain/permissions/roles/{id}:
    get:
      consumes:
      - application/json
      description: Returns list of roles permitted to domain.
      parameters:
      - description: Requested domain ID
        in: path
        name: domainID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Permitted roles
          schema:
            $ref: '#/definitions/pb.GetDomainResponse'
        "404":
          description: Domain not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get permitted roles.
      tags:
      - domain
    put:
      consumes:
      - application/json
      description: Updates list of roles permitted to domain.
      parameters:
      - description: Requested domain ID
        in: path
        name: domainID
        required: true
        type: integer
      - description: New list of permitted roles
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/pb.PermittedRoles'
      produces:
      - application/json
      responses:
        "200":
          description: Updated roles permissions
          schema:
            $ref: '#/definitions/pb.PermittedRoles'
        "404":
          description: Domain not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update permitted roles.
      tags:
      - domain
  /api/v1/domain/permissions/users/{id}:
    get:
      consumes:
      - application/json
      description: Returns list of users permitted to domain.
      parameters:
      - description: Requested domain ID
        in: path
        name: domainID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Permitted users
          schema:
            $ref: '#/definitions/pb.GetDomainResponse'
        "404":
          description: Domain not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get permitted users.
      tags:
      - domain
    put:
      consumes:
      - application/json
      description: Updates list of users permitted to domain.
      parameters:
      - description: Requested domain ID
        in: path
        name: domainID
        required: true
        type: integer
      - description: New list of permitted users
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/pb.PermittedUsers'
      produces:
      - application/json
      responses:
        "200":
          description: Updated users permissions
          schema:
            $ref: '#/definitions/pb.PermittedUsers'
        "404":
          description: Domain not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update permitted users.
      tags:
      - domain
  /api/v1/scenario/:
    post:
      consumes:
      - application/json
      description: Creates new scenario (options used for RAG vector search).
      parameters:
      - description: Input data for creating scenario
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/pb.CreateScenarioRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Scenario successfully created
          schema:
            $ref: '#/definitions/pb.Scenario'
        "400":
          description: Failed to create scenario
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create new scenario.
      tags:
      - scenario
  /api/v1/scenario/{id}:
    delete:
      consumes:
      - application/json
      description: Delete scenario by ID.
      parameters:
      - description: Scenario ID
        in: path
        name: scenarioID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Scenario deleted
          schema:
            type: string
        "400":
          description: Failed to delete scenario
          schema:
            type: string
        "404":
          description: Scenario not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete scenario.
      tags:
      - scenario
    get:
      consumes:
      - application/json
      description: Returns information about scenario.
      parameters:
      - description: Requested scenario ID
        in: path
        name: scenarioID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Scenario
          schema:
            $ref: '#/definitions/pb.GetScenarioResponse'
        "400":
          description: Failed to get scenario
          schema:
            type: string
        "404":
          description: Scenario not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get scenario.
      tags:
      - scenario
    put:
      consumes:
      - application/json
      description: Update scenario information.
      parameters:
      - description: Scenario ID
        in: path
        name: scenarioID
        required: true
        type: integer
      - description: Update params
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/pb.UpdateScenarioRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Scenario updated
          schema:
            $ref: '#/definitions/pb.Scenario'
        "400":
          description: Failed to update scenario
          schema:
            type: string
        "404":
          description: Scenario not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update scenario.
      tags:
      - scenario
  /api/v1/scenario/list:
    get:
      consumes:
      - application/json
      description: List scenarios create by user.
      parameters:
      - description: Pagination offset
        in: query
        name: offset
        required: true
        type: integer
      - description: Pagination limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of scenarios
          schema:
            $ref: '#/definitions/pb.ListScenariosResponse'
        "400":
          description: Failed to list scenarios
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: List scenarios.
      tags:
      - scenario
  /api/v1/source/:
    post:
      consumes:
      - application/json
      description: Creates new source used for RAG vector search.
      parameters:
      - description: Input data for creating source
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/pb.CreateSourceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Source successfully created
          schema:
            $ref: '#/definitions/pb.Source'
        "400":
          description: Failed to create source
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create new source.
      tags:
      - source
  /api/v1/source/{id}:
    delete:
      consumes:
      - application/json
      description: Delete domain source by ID.
      parameters:
      - description: Source ID
        in: path
        name: sourceID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Source deleted
          schema:
            type: string
        "400":
          description: Failed to delete source
          schema:
            type: string
        "404":
          description: Source not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete source.
      tags:
      - source
    get:
      consumes:
      - application/json
      description: Returns information about source and its update parameters.
      parameters:
      - description: Requested source ID
        in: path
        name: sourceID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Source
          schema:
            $ref: '#/definitions/pb.GetSourceResponse'
        "400":
          description: Failed to get source
          schema:
            type: string
        "404":
          description: Source not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get source.
      tags:
      - source
    put:
      consumes:
      - application/json
      description: Update source information or params for update job.
      parameters:
      - description: Source ID
        in: path
        name: sourceID
        required: true
        type: integer
      - description: Update params
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/pb.UpdateSourceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Source updated
          schema:
            $ref: '#/definitions/pb.Source'
        "400":
          description: Failed to update source
          schema:
            type: string
        "404":
          description: Source not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update source.
      tags:
      - source
  /api/v1/source/list:
    get:
      consumes:
      - application/json
      description: List sources to which user has access.
      parameters:
      - description: Pagination offset
        in: query
        name: offset
        required: true
        type: integer
      - description: Pagination limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of sources
          schema:
            $ref: '#/definitions/pb.ListSourcesResponse'
        "400":
          description: Failed to list sources
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: List sources.
      tags:
      - source
  /api/v1/source/permissions/roles/{id}:
    get:
      consumes:
      - application/json
      description: Returns list of roles permitted to source.
      parameters:
      - description: Requested source ID
        in: path
        name: sourceID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Permitted roles
          schema:
            $ref: '#/definitions/pb.GetSourceResponse'
        "404":
          description: Source not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get permitted roles.
      tags:
      - source
    put:
      consumes:
      - application/json
      description: Updates list of roles permitted to source.
      parameters:
      - description: Requested source ID
        in: path
        name: sourceID
        required: true
        type: integer
      - description: New list of permitted roles
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/pb.PermittedRoles'
      produces:
      - application/json
      responses:
        "200":
          description: Updated roles permissions
          schema:
            $ref: '#/definitions/pb.PermittedRoles'
        "404":
          description: Source not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update permitted roles.
      tags:
      - source
  /api/v1/source/permissions/users/{id}:
    get:
      consumes:
      - application/json
      description: Returns list of users permitted to source.
      parameters:
      - description: Requested source ID
        in: path
        name: sourceID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Permitted users
          schema:
            $ref: '#/definitions/pb.GetSourceResponse'
        "404":
          description: Source not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get permitted users.
      tags:
      - source
    put:
      consumes:
      - application/json
      description: Updates list of users permitted to source.
      parameters:
      - description: Requested source ID
        in: path
        name: sourceID
        required: true
        type: integer
      - description: New list of permitted users
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/pb.PermittedUsers'
      produces:
      - application/json
      responses:
        "200":
          description: Updated users permissions
          schema:
            $ref: '#/definitions/pb.PermittedUsers'
        "404":
          description: Source not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update permitted users.
      tags:
      - source
  /auth/v1/login:
    post:
      consumes:
      - application/json
      description: Authorizes user with provided credentials.
      parameters:
      - description: User credentials
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/pb.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Auth token and metadata
          schema:
            $ref: '#/definitions/pb.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Login user.
      tags:
      - auth
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
