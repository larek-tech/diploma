syntax = "proto3";

package pb.ml;
option go_package="internal/domain/pb";

import "google/protobuf/timestamp.proto";

message MultiQuery {
  bool useMultiquery = 1;
  int64 nQueries = 2; // Количество перефразированных вопросов
  optional string queryModelName = 3; //
}

message Reranker {
  bool useRerank = 1;
  string rerankerModel = 2;
  int64 rerankerMaxLength = 3;
  int64 topK = 4; // Количество чанков после реранкинга
}

message LlmModel{
  string modelName = 1;
  float temperature = 2;
  int64 topK = 3;
  float topP = 4;
  string systemPrompt = 5;
}

message VectorSearch {
  int64 topN = 1; // Сколько чанков забирать при векторном поиске.
  float threshold = 2;
  bool searchByQuery = 3;
}

message Scenario {
  int64 id = 1;
  optional MultiQuery multiQuery = 2;
  optional Reranker reranker = 3;
  optional VectorSearch vectorSearch = 4;
  LlmModel model = 5;
  google.protobuf.Timestamp createdAt = 6;
  google.protobuf.Timestamp updatedAt = 7;
};

message Query {
  int64 id = 1;
  int64 userId = 2;
  string content = 3;
};

message ProcessQueryRequest {
  Query query = 1;
  optional Scenario scenario = 2;
  repeated string sourceIds = 3;
};

message Chunk {
  string content = 1;
};

message ProcessQueryResponse {
  Chunk chunk = 1;
  repeated string sourceIds = 2;
};

message ModelParams{
  optional MultiQuery multiQuery = 1;
  optional Reranker reranker = 2;
  optional VectorSearch vectorSearch = 3;
  LlmModel model = 4;
};

message GetOptimalParamsRequest{
  repeated string sourceIds = 1;
}