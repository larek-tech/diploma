volumes:
  pg_data:
  postgres_data:
  ollama_data:
  jaeger_data:
  minio_data:
  zoo_data_log:
  zoo_data_secrets:
  zoo_data:
  kafka_data_cfg:
  kafka_data:
  kafka_data_secrets:

services:
  jaeger:
    image: jaegertracing/all-in-one
    container_name: jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger_data:/tmp
    ports:
      - "5775:5775"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
      - "4317:4317"
      - "4318:4318"
    restart: unless-stopped

  pg:
    image: postgres:17
    restart: always
    ports:
      - "5433:5433"
    command: -p 5433
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-pguser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-pgpass}
      - POSTGRES_DB=${POSTGRES_DB:-dev}
    volumes:
      - pg_data:/var/lib/postgresql/data

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: unless-stopped
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    healthcheck:
      test: echo stat | nc localhost 2181
      interval: 10s
      timeout: 10s
      retries: 3
    volumes:
      - zoo_data_log:/var/lib/zookeeper/log
      - zoo_data_secrets:/etc/zookeeper/secrets
      - zoo_data:/var/lib/zookeeper/data
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"

  kafka:
    image: confluentinc/cp-kafka:latest
    restart: unless-stopped
    healthcheck:
      test: ps augwwx | egrep [S]upportedKafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: LISTENER_INT://kafka:29092,LISTENER_EXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INT://kafka:29092,LISTENER_EXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INT:PLAINTEXT,LISTENER_EXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INT
    volumes:
      - kafka_data_cfg:/mnt/shared/config
      - kafka_data:/var/lib/kafka/data
      - kafka_data_secrets:/etc/kafka/secrets

  postgres:
    build:
      context: data
      dockerfile: docker/postgres.Dockerfile
    container_name: postgres_local
    restart: unless-stopped
    env_file:
      - data/local.env
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: master
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrator:
    build:
      context: data
      dockerfile: docker/migrator.Dockerfile
    container_name: migrator_local
    depends_on:
      - postgres
    env_file:
        - data/local.env
    environment:
      POSTGRES_DB: master
      POSTGRES_HOST: postgres_local
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password

  ollama:
    build:
        context: data
        dockerfile: docker/ollama.Dockerfile
    container_name: ollama_local
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
        - ollama_data:/root/.ollama
    env_file:
        - data/local.env
    environment:
      OLLAMA_KEEP_ALIVE: 24h
      # OLLAMA_CONTEXT_LENGTH: 8192 can be used in order to control the context length for all models otherwise set up in embedder / llm related configs
    healthcheck:
      test: "bash -c 'cat < /dev/null > /dev/tcp/localhost/11434'"
      interval: 5s
#    deploy:
#      resources:
#        reservations:
#          devices:
#            - driver: nvidia
#              count: 1
#              capabilities: [ gpu ]

  s3:
    container_name: s3_local
    image: quay.io/minio/minio:latest
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    restart: unless-stopped
    ports:
      - "9100:9100"
      - "9101:9101"
    command: server /data --console-address ":9101"
    volumes:
      - minio_data:/data

  crawler:
    build:
      context: data
      dockerfile: docker/crawler.Dockerfile
    container_name: crawler_local
    restart: unless-stopped
    depends_on:
      - postgres
    env_file:
        - data/local.env
    environment:
      POSTGRES_DB: master
      POSTGRES_HOST: postgres_local
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      OLLAMA_HOST: http://ollama_local:11434
      OLLAMA_MODEL: bge-m3:latest
      KAFKA_SERVERS: kafka:29092
    ports:
      - "9998:8080"

  parser:
    build:
      context: data
      dockerfile: docker/parser.Dockerfile
    container_name: parser_local
    restart: unless-stopped
    depends_on:
      - postgres
      - ollama
    env_file:
        - data/local.env
    environment:
      KAFKA_SERVERS: kafka:29092
      POSTGRES_DB: master
      POSTGRES_HOST: postgres_local
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      OLLAMA_LLM_ENDPOINT: http://ollama_local:11434
      OLLAMA_LLM_MODEL: llama3.2
      OLLAMA_EMBEDDER_ENDPOINT: http://ollama_local:11434
      OLLAMA_EMBEDDER_MODEL: bge-m3:latest
      S3_ENDPOINT: s3:9000
      S3_ACCESS_KEY_ID: minio
      S3_SECRET_ACCESS_KEY: minio123
    ports:
      - "9999:8081"

  api:
    build:
      context: api
      dockerfile: Dockerfile
    restart: always
    ports:
      - "9000:9000"
    depends_on:
      - jaeger
      - pg
      - auth
      - domain

  auth:
    build:
      context: auth
      dockerfile: Dockerfile
    restart: always
    ports:
      - "9001:9001"
    depends_on:
      - jaeger
      - pg

  chat:
    build:
      context: chat
      dockerfile: Dockerfile
    restart: always
    ports:
      - "9002:9002"
    depends_on:
       - jaeger
       - pg

  domain:
    build:
      context: domain
      dockerfile: Dockerfile
    restart: always
    ports:
      - "9003:9003"
    depends_on:
      - jaeger
      - pg
      - zookeeper
      - kafka

  ml:
    build:
      context: ml
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8888:8888"
    volumes:
      - ~/.cache/huggingface:/root/.cache/huggingface
    extra_hosts:
      - "host.docker.internal:host-gateway"
#    deploy:
#      resources:
#        reservations:
#          devices:
#            - driver: nvidia
#              count: 1
#              capabilities: [ gpu ]
